import os
import logging
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("8035038086:AAFtzYaBe7geXSkkZnW4zMzu3OpEc5QxacU")
SOLAX_TOKEN = os.environ.get("202505131356118907804314")
SOLAX_SN = os.environ.get("XB4050K7563064")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —É SolaX
def get_inverter_data():
    url = f"https://global.solaxcloud.com:9443/proxy/api/getRealtimeInfo.do?tokenId={SOLAX_TOKEN}&sn={SOLAX_SN}"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        result = response.json()
        if not result.get("success"):
            return {"–û—à–∏–±–∫–∞": result.get("exception", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}
        data = result.get("result", {})
        return {
            "–ú–æ—â–Ω–æ—Å—Ç—å (–í—Ç)": data.get("acpower", "N/A"),
            "–°–µ–≥–æ–¥–Ω—è (–∫–í—Ç¬∑—á)": data.get("yieldtoday", "N/A"),
            "–í—Å–µ–≥–æ (–∫–í—Ç¬∑—á)": data.get("yieldtotal", "N/A"),
            "–í —Å–µ—Ç—å (–í—Ç)": data.get("feedinpower", "N/A")
        }
    except Exception as e:
        return {"–û—à–∏–±–∫–∞": str(e)}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /status —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_inverter_data()
    message = "\n".join([f"{key}: {value}" for key, value in data.items()])
    await update.message.reply_text("üìä –î–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞:\n" + message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
